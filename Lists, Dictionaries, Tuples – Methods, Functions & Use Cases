
LISTS (list)
Ordered, mutable collections

List Methods:
- append(x) - Adds x to end (lst.append(5))
- extend(iterable) - Adds all elements from iterable (lst.extend([5,6]))
- insert(i,x) - Inserts x at index i (lst.insert(1,10))
- remove(x) - Removes first x found (lst.remove(5))
- pop([i]) - Removes and returns item at i (default last) (lst.pop())
- clear() - Removes all items (lst.clear())
- index(x) - Returns index of first x (lst.index(5))
- count(x) - Counts occurrences of x (lst.count(5))
- sort(key=None,reverse=False) - Sorts list (lst.sort())
- reverse() - Reverses list in-place (lst.reverse())
- copy() - Returns shallow copy (lst.copy())

List Functions:
- len(lst) - Returns length (len([1,2,3]) → 3)
- sorted(lst) - Returns new sorted list (sorted([3,1,2]) → [1,2,3])
- min(lst) - Returns smallest element (min([1,2,3]) → 1)
- max(lst) - Returns largest element (max([1,2,3]) → 3)
- sum(lst) - Sums all elements (sum([1,2,3]) → 6)

List Slicing:
lst = [1,2,3,4,5]
lst[1:4] → [2,3,4]
lst[::-1] → [5,4,3,2,1] (reverse)

DICTIONARIES (dict)
Unordered, mutable key-value pairs

Dictionary Methods:
- get(key[,default]) - Returns value for key or default (d.get("a",0))
- items() - Returns (key,value) pairs (d.items())
- keys() - Returns all keys (d.keys())
- values() - Returns all values (d.values())
- pop(key[,default]) - Removes key and returns value (d.pop("a"))
- popitem() - Removes and returns last (key,value) (d.popitem())
- update(dict2) - Merges dict2 into dict (d.update({"b":2}))
- clear() - Removes all items (d.clear())
- setdefault(key[,default]) - Sets key if not exists (d.setdefault("a",1))
- copy() - Returns shallow copy (d.copy())

Dictionary Functions:
- len(d) - Returns number of keys (len({"a":1}) → 1)
- dict.fromkeys(keys,value) - Creates dict with keys (dict.fromkeys(["a","b"],0))

Dictionary Comprehension:
squares = {x:x**2 for x in range(5)}
Result: {0:0,1:1,2:4,3:9,4:16}

TUPLES (tuple)
Ordered, immutable sequences

Tuple Methods:
- count(x) - Counts occurrences of x (t.count(5))
- index(x) - Returns index of first x (t.index(5))

Tuple Functions:
- len(t) - Returns length (len((1,2,3)) → 3)
- sorted(t) - Returns sorted list (sorted((3,1,2)) → [1,2,3])
- min(t) - Returns smallest element (min((1,2,3)) → 1)
- max(t) - Returns largest element (max((1,2,3)) → 3)
- sum(t) - Sums all elements (sum((1,2,3)) → 6)

Tuple Unpacking:
a,b,c = (1,2,3)
Result: a=1,b=2,c=3

COMMON OPERATIONS

Membership Check:
if 5 in [1,2,5]:  # Works for lists, tuples, dict keys
    print("Found")

Iteration:
for item in [1,2,3]:  # Works for lists, tuples, dict keys
    print(item)

Conversion Between Types:
list((1,2,3)) → [1,2,3] (tuple to list)
tuple([1,2,3]) → (1,2,3) (list to tuple)
dict([("a",1)]) → {"a":1} (list of tuples to dict)

WHEN TO USE WHICH

Lists:
- When you need ordered collection that can change
- When you need many modification operations
- When order matters and duplicates are allowed

Dictionaries:
- When you need fast lookups by key
- When you need to store associated data pairs
- When order doesn't matter (Python 3.7+ preserves insertion order)

Tuples:
- When you need ordered collection that won't change
- When you need to use as dictionary keys (must be immutable)
- When working with database records or coordinates

ADDITIONAL NOTES

Performance Characteristics:
- List indexing: O(1)
- List append/pop: O(1)
- List insert/delete: O(n)
- Dictionary lookup: O(1)
- Dictionary insert/delete: O(1)
- Tuple indexing: O(1)

Memory Efficiency:
Tuples are more memory efficient than lists for immutable data

Best Practices:
- Use tuples for heterogeneous data (different types)
- Use lists for homogeneous data (same types)
- Use dictionaries for labeled data
- Prefer tuples for constant data
- Use list comprehensions for transformations
- Use dict.get() to avoid KeyError exceptions

Common Pitfalls:
- Modifying list while iterating
- Assuming dictionary order (pre-Python 3.7)
- Confusing mutable vs immutable operations
- Using list for large datasets (consider generators)
- Forgetting that dict keys must be hashable

This plaintext version removes all formatting and focuses on the essential information in a clean, straightforward presentation. The content has been expanded with additional practical notes about performance, memory usage, best practices, and common pitfalls.
