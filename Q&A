Accessing a value in a dictionary using its key

my_dict = {"name": "Alice", "age": 25}
print(my_dict["name"])  # Output: Alice











split() turns a string into a list, using spaces by default

text = "I love Python"
words = text.split()
print(words)  # Output: ['I', 'love', 'Python']







abs() returns the absolute (positive) value of a number

x = -5
result = abs(x)
print(result)  # Output: 5









while loop minimum execution

count = 1
while count <= 3:       # ✅ Condition is true initially, so loop runs
    print("Run:", count)
    count += 1

# If the condition is false from the start, loop doesn't run at all:
count = 5
while count < 3:        # ❌ Condition is false, so nothing happens
    print("This won't print")










Using slice objects with tuples

a = (0, 1, 2, 3, 4)       # A tuple with 5 elements
b = slice(0, 2)           # Creates a slice object for indices 0 to 1 (2 is exclusive)
result = a[b]             # Applies the slice to the tuple

print(result)             # Output: (0, 1)
# Explanation: slice(0, 2) extracts elements from index 0 up to but not including 2









# ✅ Set makes use of: 🔑 **only keys** (no values)
# ✅ Dictionary makes use of: 🔑 **key-value pairs**

# Example of Set
my_set = {"apple", "banana", "cherry"}  # just values (internally acts like keys)
print(my_set)

# Example of Dictionary
my_dict = {"apple": 1, "banana": 2}  # keys with values
print(my_dict)









Data type of: a = [(1, 1), (2, 4), (3, 9)]

a = [(1,1), (2,4), (3,9)]

# ✅ Explanation:
# a → list
# Each item inside a → tuple
# So it's a: list of tuples

print(type(a))         # 👉 <class 'list'>
print(type(a[0]))      # 👉 <class 'tuple'>










# a = (1, 2, 3, 4)
# a[1:-1] gives a slice from index 1 to one before the last

a = (1, 2, 3, 4)
print(a[1:-1])  # 👉 Output: (2, 3)











# else with if: runs ONLY if condition is False
x = 5
if x > 10:
    print("Greater")
else:
    print("Not greater")  # 👉 runs because x is not > 10

# else with while: runs ONLY if loop finishes without break
i = 0
while i < 3:
    print(i)
    i += 1
else:
    print("Loop ended normally")  # 👉 runs because no break

# else with for: also runs if no break happens
for i in range(3):
    print(i)
else:
    print("For loop done")  # 👉 runs because no break







# 🔤 String 
text = "hello"           # stores sequence of characters

# 📦 Dictionary is for key-value, 
my_dict = {"a": 1}      

# List is for ordered items






my_list = [10, 20, 30]
x = my_list.pop(1)  # removes and returns item at index 1 → 20
print(x)            # Output: 20
print(my_list)      # Output: [10, 30]





def subtract_and_store(value):
    return store - value  # uses global 'store' but does NOT change it inside function

store = 10
store = subtract_and_store(3)  # 10 - 3 = 7, store updated to 7
store = subtract_and_store(4)  # 7 - 4 = 3, store updated to 3
print(store)  # prints 3





typr error and value error
TypeError: x 5  y = "5"    z = x + y
ValueError:  int("five")



a = 10
b = "5"
print(a / b)  # ❌ TypeError








add "Mango" priced at $2.99 to the fruit_prices dictionary?
fruit_prices["Mango"] = 2.99







my_tuple = (1, 2, 3)
sum_of_tuple = sum(my_tuple)
print(sum_of_tuple)
# 6









# Tuple, List, and String can use * to repeat
print((1, 2) * 2)     # (1, 2, 1, 2)
print([1, 2] * 2)     # [1, 2, 1, 2]
print("Hi" * 2)       # HiHi

# Dict and Set can't use *
# {"a":1} * 2 → ❌ TypeError
# {1,2} * 2   → ❌ TypeError










 Chart: List vs Tuple vs Dictionary in Python**

| Feature                | **List**                     | **Tuple**                | **Dictionary**                           |
| ---------------------- | ---------------------------- | ------------------------ | ---------------------------------------- |
| **Syntax**             | `[1, 2, 3]`                  | `(1, 2, 3)`              | `{"key": "value"}`                       |
| **Ordered?**           | ✅ Yes                        | ✅ Yes                    | ❌ No (Python 3.7+ keeps insertion order) |
| **Mutable?**           | ✅ Yes                        | ❌ No                     | ✅ Yes                                    |
| **Allows Duplicates?** | ✅ Yes                        | ✅ Yes                    | ❌ No (keys must be unique)               |
| **Indexing?**          | ✅ By integer                 | ✅ By integer             | ✅ By key                                 |
| **Use Case**           | General collection, editable | Fixed data, safe to pass | Key-value storage, fast lookup           |
| **Memory Efficient?**  | ❌ Less                       | ✅ More                   | ❌ Depends on usage                       |
| **Methods Example**    | `append()`, `pop()`          | `count()`, `index()`     | `get()`, `items()`, `pop()`, `update()`  |
| **Conversion**         | `tuple(list)`                | `list(tuple)`            | `dict.fromkeys()`                        |








print(0.1 + 0.2 == 0.3)  # output False








✅ Correct Syntax:

try:
    # risky code here
    pass
except (TypeError, ValueError, ZeroDivisionError):
    print("An error occurred!")







lst = [i for i in range(-1, -2)]
# You can’t go from -1 to -2 using a positive step.  So the range is empty.








foo = (1, 2, 3)
foo.index(0)
# ValueError: tuple.index(x): x not in tuple





using break keyword is not allowed outside loop 







lst = [[x for x in range(3)] for y in range(3)]

for r in range(3):
    for c in range(3):
        if lst[r][c] % 2 != 0:
            print("#")










a = 1
b = 0
a = a ^ b
b = a ^ b
a = a ^ b
print(a, b)








my_list = [x * x for x in range(5)]

def fun(lst):
    del lst[lst[2]]
    return lst

print(fun(my_list))
# output [0, 1, 4, 9]








x = float(input())
y = float(input())
print(y ** (1 / x))
# output 2.0 











# Lesson: Counting how many '#' will print based on odd numbers in a nested list

lst = [[x for x in range(3)] for y in range(3)]
# lst is a 3x3 matrix:
# [
#  [0, 1, 2],
#  [0, 1, 2],
#  [0, 1, 2]
# ]

count = 0
for r in range(3):        # rows 0 to 2
    for c in range(3):    # columns 0 to 2
        if lst[r][c] % 2 != 0:  # check if value is odd
            print("#")
            count += 1

# Total odd numbers (1 in each row) = 3
print("Total '#' printed:", count)
# Output:
# #
# #
# #
# Total '#' printed: 3
















d = {'a': 1, 'b': 2}

for k in d.keys():
    print(k)  # keys

for v in d.values():
    print(v)  # values

for k, v in d.items():
    print(k, v)  # keys and values









# List: access by index (integer)
lst = ['a', 'b', 'c']
print(lst[0])  # 'a'

# Dict: access by key (not index)
d = {'one': 1, 'two': 2}
print(d['one'])  # 1

# KeyError if key missing
# print(d[0])  # Error

# Use get() to avoid error
print(d.get('one'))  # 1
print(d.get(0))      # None










PYTHON KEYWORD
| Category                | Keywords                                                          |
| ----------------------- | ----------------------------------------------------------------- |
| **Control Flow**        | `if`, `else`, `elif`, `for`, `while`, `break`, `continue`, `pass` |
| **Boolean / Logic**     | `True`, `False`, `and`, `or`, `not`, `is`, `in`                   |
| **Functions & Classes** | `def`, `return`, `lambda`, `yield`, `class`                       |
| **Exception Handling**  | `try`, `except`, `finally`, `raise`, `assert`                     |
| **Modules & Imports**   | `import`, `from`, `as`, `global`, `nonlocal`                      |
| **Object Management**   | `del`, `with`                                                     |
| **Data & Structure**    | `None`                                                            |
| **Async Programming**   | `async`, `await`                                                  |







# Build dictionary from list with one-item tuples and print the first element of each tuple

dictionary = {}
my_list = ['a', 'b', 'c', 'd']

# Create dictionary keys from list except last item, values are one-item tuples
for i in range(len(my_list) - 1):
    dictionary[my_list[i]] = (my_list[i], )

# Loop over sorted keys and print the first element of each tuple value
for i in sorted(dictionary.keys()):
    k = dictionary[i]
    print(k[0])  # prints 'a', 'b', 'c'












# Slice in tuple is ok 
tup = (1, 2, 4, 8)
tup = tup[1:-1]
tup = tup[0]
print(tup)







def fun(x):
    if x % 2 == 0:
        return 1
    else:
        return

print(fun(fun(2)) + 1)







def any():
    print(var + 1, end='')

var = 1
any()
print(var)  # output 21

2 from inside the function
1 from the global variable printed outside the function










def fun(x):
    x += 1
    return x

x = 2
x = fun(x + 1)
print(x)   # output 4









def func_1(a):
    return a ** a

def func_2(a):
    return func_1(a) * func_1(a)

print(func_2(2))  # 16










dictionary = {'one': 'two', 'three': 'one', 'two': 'three'}

for key, value in dictionary.items():
    print(key + " + " + value)


# one + two
three + one
two + three











def f(x):
    if x == 0:
        return 0         
    return x + f(x - 1)  # Recursive call: add current x to sum of smaller numbers

print(f(4))              # Output: 10







You Can’t Use Reserved Keywords as Function Parameters




def greet(name):
    print("Hello", name)

greet("Sara")
print(name)  # ❌ ERROR!










pop([i]) → Removes and returns item
count(x) → Counts occurrences







d = {"a":1, "b":2}
print(d.get("a", 0))      # 1
print(list(d.items()))    # [('a',1), ('b',2)]
print(list(d.keys()))     # ['a', 'b']
print(list(d.values()))   # [1, 2]

d.update({"c":3})         
print(d)                 # {'a':1, 'b':2, 'c':3}

d.pop("b")               
print(d)                 # {'a':1, 'c':3}

d.popitem()              
print(d)                 # {'a':1}

d.clear()                
print(d)                 # {}











my_dict = {"A": 1, "B": 2}

# Access value
val = my_dict["A"]          # 1

# Add / Modify entry
my_dict["C"] = 3            # {'A':1, 'B':2, 'C':3}

# Delete entry
del my_dict["B"]            # {'A':1, 'C':3}

# Dictionary comprehension (square numbers 0 to 4)
squared = {x: x**2 for x in range(5)}  
# {0:0, 1:1, 2:4, 3:9, 4:16}




packing unpacking tuple:
a, b, c = my_tuple







Orange = mango
# NameError





# AttributeError
x = 10  
x.append(2)  # Error: int has no attribute 'append'








if A = 16 and B = 15. A % B // A





The // operator in Python is the truncation division operator




What is the output of print (0.1 + 0.2 == 0.3)?





What is the return value of trunc()?   # integer




Keys are used to access corresponding values in a dictionary.








# ✅ LESSON: Hashable vs Unhashable (Easy Example)

# ✅ These can go in a set (they cannot be changed)
good_set = {1, "hi", (2, 3)}  # int, str, tuple → OK

# ❌ These cannot go in a set (they can be changed)
# bad_set = {[1, 2], {"a": 1}}  # list and dict → ❌ TypeError

# ✅ Fix: Make them unchangeable
fixed_set = {tuple([1, 2]), frozenset([3, 4])}  # now OK











# ✅ LESSON: zip() in Python (Beginner-Friendly)

# zip() joins items from two or more lists pair by pair

names = ["Ali", "Zara", "Omar"]
ages = [25, 30, 22]

# zip them together
zipped = zip(names, ages)
print(list(zipped))  # [('Ali', 25), ('Zara', 30), ('Omar', 22)]

# You can use it in a loop too
for name, age in zip(names, ages):
    print(name, "is", age, "years old")











a = frozenset([1, 2, 3])
# a.add(4)  # ❌ Error: can't change frozenset

print(a)  # Output: frozenset({1, 2, 3})










The "-" operator cannot be used with strings in Python. It is not a valid arithmetic operation for string manipulation.










To insert 5 to the third position in list1, we use
list1.insert(2, 5)








Set makes use of key and  Dictionary makes use of key, key  value









If a=(1,2,3,4), a[1:-1] is (2,3)

















# ✅ LESSON: Lists Inside Lists (2D Arrays) – Super Beginner Friendly

# 🔸 1. A list can hold other lists
matrix = [
    [1, 2, 3],    # Row 0
    [4, 5, 6],    # Row 1
    [7, 8, 9]     # Row 2
]

# 🔹 2. Accessing values using two indexes
print(matrix[0][0])  # Top-left → 1
print(matrix[2][1])  # Row 2, Col 1 → 8

# 🔹 3. Nested loop to read everything
for row in matrix:
    for item in row:
        print(item, end=' ')
# Output: 1 2 3 4 5 6 7 8 9

# 🔹 4. Changing a value
matrix[0][1] = 99
print(matrix)  # [[1, 99, 3], [4, 5, 6], [7, 8, 9]]

# 🔹 5. Creating a blank 3×3 grid using nested loops
grid = []
for i in range(3):
    row = []
    for j in range(3):
        row.append(0)
    grid.append(row)
print(grid)  # [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

# 🔹 6. Same grid using list comprehension
grid = [[0 for j in range(3)] for i in range(3)]

# 🔹 7. Real-world example: 31 days, 24 hours (temperature tracker)
temps = [[0.0 for h in range(24)] for d in range(31)]
print(temps[0][0])  # First day, midnight temp → 0.0

# 🔹 8. Hotel: 3 buildings × 15 floors × 20 rooms
hotel = [[[False for r in range(20)] for f in range(15)] for b in range(3)]

# Book one room (building 2, floor 10, room 14)
hotel[1][9][13] = True

# Count available rooms on building 3, floor 15
available = 0
for room in hotel[2][14]:
    if not room:
        available += 1
print("Available rooms:", available)










# 🔸 4. Omitting start/end in slices
my_list = [1, 2, 3, 4, 5]
print(my_list[2:])    # [3, 4, 5]
print(my_list[:2])    # [1, 2]
print(my_list[-2:])   # [4, 5]

# 🔸 5. Deleting slices
my_list = [1, 2, 3, 4, 5]
del my_list[0:2]
print(my_list)  # [3, 4, 5]








# Ex 2
list_1 = ["A", "B", "C"]
list_2 = list_1
list_3 = list_2
del list_1[0]
del list_2
print(list_3)  # ['B', 'C']











# ✅ LESSON: List Slicing with Negative Index and Step

my_list = [10, 8, 6, 4, 2]

# 🔹 Slice with no step:
new_list = my_list[-1:1]  # From index -1 (2) to index 1, but no step
print(new_list)           # Output: [] (empty, because default step is +1 and -1<1)

# 🔹 Slice with negative step:
result = my_list[-1:1:-1]  # From index -1 (2) to index 1, step -1
print(result)              # Output: [2, 4, 6]

# 🔍 Summary:
# - my_list[-1:1] → nothing, since it moves forward (default step = 1)
# - my_list[-1:1:-1] → moves backward from index -1 to just after index 1














my_list = [8, 10, 6, 2, 4]
swapped = True  

while swapped:
    swapped = False                     

    for i in range(len(my_list) - 1):
        if my_list[i] > my_list[i + 1]:
            # Swap neighbor elements if they are in wrong order
            my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]

            swapped = True


# ✅ LESSON: Why loops don't need `global` but functions do

x = 5

# 🔁 LOOP: No global needed
for i in range(1):
    x = 10  # Directly updates outer x
print(x)  # Output: 10

# 🧠 Reason: Loops use the same scope as outside

# ----------------------------

x = 5

# 🧭 FUNCTION: Needs global
def change():
    x = 10  # Creates new local x (does NOT change outer x)

change()
print(x)  # Output: 5 ❌

# ✅ Fix with global
def change():
    global x
    x = 10  # Now changes outer x

change()
print(x)  # Output: 10 ✅

# ----------------------------

# 📦 Summary:
# - Loops = Same scope → Can update variables directly
# - Functions = New local scope → Need 'global' to change outer variables












# ✅ LESSON: Complex Numbers in Python (Imaginary Unit 'j')

z = 1 + 2j  # complex number (real + imaginary parts)

print(z.real)  # prints real part → 1.0
print(z.imag)  # prints imaginary part → 2.0

# Note:
# - Use 'j' (not 'i') for imaginary part in Python
# - Complex numbers = numbers with real and imaginary parts












 round(number, digits)

* Round a number to a specific decimal place.
* Syntax: round(number, digits)
### Example:
round(3.75, 1)  # Keep 1 digit after decimal → 3.8
round(3.75, 0)  # Keep 0 digits after decimal → 4.0
round(3.75, 2)  # Keep 2 digits after decimal → 3.75












# ✅ LESSON: Boolean Value of Strings in Python

# Any non-empty string is True, even if it looks "false-like"
print(bool("False"))  # True
print(bool("0"))      # True
print(bool("no"))     # True

# Only an empty string is False
print(bool(""))       # False











numbers = [10, 20, 30, 40, 50]

# This line copies value from index 4 to index 1:
numbers[1] = numbers[4]













# ✅ LESSON: Bitwise Operators with example values x=15 and y=16

# Binary representation (8 bits for clarity):
# x = 15 → 0000 1111
# y = 16 → 0001 0000

# Bitwise AND (&)
# 0000 1111 (15)
# 0001 0000 (16)
# ------------
# 0000 0000 = 0
print("x & y =", 15 & 16)  # Output: 0

# Bitwise OR (|)
# 0000 1111 (15)
# 0001 0000 (16)
# ------------
# 0001 1111 = 31
print("x | y =", 15 | 16)  # Output: 31

# Bitwise NOT (~) on x
# ~15 inverts bits:
# 0000 1111 → 1111 0000 (which is -16 in two's complement)
print("~x =", ~15)          # Output: -16

# Bitwise XOR (^)
# 0000 1111 (15)
# 0001 0000 (16)
# ------------
# 0001 1111 = 31
print("x ^ y =", 15 ^ 16)  # Output: 31

# Bitwise Right Shift (>>)
# y >> 1:
# 0001 0000 (16) → 0000 1000 (8)
print("y >> 1 =", 16 >> 1)  # Output: 8

# Bitwise Left Shift (<<)
# y << 3:
# 0001 0000 (16) → 1000 0000 (128)
print("y << 3 =", 16 << 3)  # Output: 128

# ---------------------------
# Reminder: To compare bits easily,
# write values like this:

# x =  0000 1111 (15)
# y =  0001 0000 (16)



















Full Table of Python Operators (with Precedence Order)

# 📘 Operator Types:
# Arithmetic, Comparison, Logical, Bitwise, Assignment, Identity, Membership

# 🔢 1. Arithmetic Operators
# -----------------------------------------
# +   Addition           → a + b
# -   Subtraction        → a - b
# *   Multiplication     → a * b
# /   Division           → a / b
# //  Floor Division     → a // b
# %   Modulus (remainder)→ a % b
# **  Exponentiation     → a ** b

# 🔍 2. Comparison Operators
# -----------------------------------------
# ==  Equal to           → a == b
# !=  Not equal          → a != b
# >   Greater than       → a > b
# <   Less than          → a < b
# >=  Greater or equal   → a >= b
# <=  Less or equal      → a <= b

# 🧠 3. Logical Operators
# -----------------------------------------
# and   Logical AND      → a and b
# or    Logical OR       → a or b
# not   Logical NOT      → not a

# 🧮 4. Bitwise Operators (work on binary)
# -----------------------------------------
# &   Bitwise AND        → a & b
# |   Bitwise OR         → a | b
# ^   Bitwise XOR        → a ^ b
# ~   Bitwise NOT        → ~a
# <<  Left Shift         → a << 1
# >>  Right Shift        → a >> 1

# 📦 5. Assignment Operators
# -----------------------------------------
# =     Assign           → a = b
# +=    Add and assign   → a += b
# -=    Subtract and assign → a -= b
# *=    Multiply and assign → a *= b
# /=    Divide and assign → a /= b
# //=   Floor divide assign → a //= b
# %=    Modulus assign   → a %= b
# **=   Exponent assign  → a **= b
# &=, |=, ^=, <<=, >>=   Bitwise assignments

# 🧬 6. Identity Operators
# -----------------------------------------
# is     Same identity   → a is b
# is not Not same        → a is not b

# 📚 7. Membership Operators
# -----------------------------------------
# in      Value found     → "a" in "abc"
# not in  Value not found → "z" not in "abc"

# 📊 8. Precedence (from Highest to Lowest)
# -----------------------------------------
# 1. ()          → Parentheses
# 2. **          → Exponent
# 3. +, -        → Unary plus/minus
# 4. *, /, //, % → Multiplication / Division
# 5. +, -        → Addition / Subtraction
# 6. <<, >>      → Bitwise shift
# 7. &           → Bitwise AND
# 8. ^           → Bitwise XOR
# 9. |           → Bitwise OR
# 10. ==, !=, >, <, >=, <= → Comparisons
# 11. not        → Logical NOT
# 12. and        → Logical AND
# 13. or         → Logical OR
# 14. =, +=, etc → Assignment
# 15. is, in     → Identity & Membership













for i in range(6, 1, -2):
    print(i, end=" ")  # Outputs: 6 4 2









# ✅ LESSON: Any number raised to the power of 0 equals 1
# This follows the exponent rules consistently

print(5 ** 0)    # Output: 1
print(100 ** 0)  # Output: 1
print((-3) ** 0) # Output: 1



✅ Any number multiplied by 0 equals 0
# This is basic multiplication rule

print(5 * 0)     # Output: 0
print(100 * 0)   # Output: 0
print(-3 * 0)    # Output: 0







float("12.34.56")





[1, 2, 3] + {"a": 1}
You can store dict in a list → [{"a":1}] ✅
But you can’t add list + dict → [1] + {"a":1} ❌







"".join([1, 2, 3])
❌ TypeError — list has integers, not strings.
Use: "".join(["1", "2", "3"]) ✅





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































v




































