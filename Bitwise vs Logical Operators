 üßÆ Python Bitwise vs Logical Operators ‚Äì Full Lesson


üîπ PART 1: LOGICAL OPERATORS (Work on Booleans: `True`, `False`)

| Operator | Name        | Example          | Result  |
| -------- | ----------- | ---------------- | ------- |
| `and`    | Logical AND | `True and False` | `False` |
| `or`     | Logical OR  | `True or False`  | `True`  |
| `not`    | Logical NOT | `not True`       | `False` |



‚úÖ Truth Table for Logical Operators

| A     | B     | A and B | A or B | not A |
| ----- | ----- | ------- | ------ | ----- |
| True  | True  | True    | True   | False |
| True  | False | False   | True   | False |
| False | True  | False   | True   | True  |
| False | False | False   | False  | True  |



üîç Examples:

a = True
b = False

print(a and b)  # False
print(a or b)   # True
print(not a)    # False




üîπ PART 2: BITWISE OPERATORS (Work on integers ‚Äì bit by bit)

| Operator    | Symbol | Example  | Meaning                        |
| ----------- | ------ | -------- | ------------------------------ |
| AND         |   &    | 5 & 3    | Bitwise AND                    |
| OR          |   |    | 5 | 3    | Bitwise OR                     |
| XOR         |  ^     | 5 ^ 3    | Bitwise exclusive OR           |
| NOT         |  ~     |  ~5      | Bitwise NOT (inverts all bits) |
| Shift Left  |  <<    | 5 << 1   | Shifts bits to the left        |
| Shift Right |  >>    | 5 >> 1   | Shifts bits to the right       |



‚úÖ Binary Chart

| Decimal | Binary |
| ------- | ------ |
| 5       | 0101   |
| 3       | 0011   |

‚öôÔ∏è Examples

&   AND

print(5 & 3)  
0101 & 0011    0001 => 1

## COMPARISON EXAMPLE 
  0101 ( compare with below )
  0011 ( compare with above )
---------------
  0001 => 1




 |  OR

print(5 | 3)  # 0101 | 0011 = 0111 => 7


#### `^` XOR

print(5 ^ 3)  # 0101 ^ 0011 = 0110 => 6


#### `~` NOT (bitwise complement)

print(~5)     # ~00000101 = 11111010 (in 2's complement: -6)


#### `<<` Left Shift

```python
print(5 << 1) # 00000101 << 1 = 00001010 => 10
```

#### `>>` Right Shift

```python
print(5 >> 1) # 00000101 >> 1 = 00000010 => 2
```

---

## üéØ Summary Table

| Operation        | Type    | Example   | Result  |     |     |
| ---------------- | ------- | --------- | ------- | --- | --- |
| `True and False` | Logical | `a and b` | `False` |     |     |
| `5 & 3`          | Bitwise | `a & b`   | `1`     |     |     |
| `True or True`   | Logical | `a or b`  | `True`  |     |     |
| \`5              | 3\`     | Bitwise   | \`a     | b\` | `7` |
| `not False`      | Logical | `not a`   | `True`  |     |     |
| `~5`             | Bitwise | `~a`      | `-6`    |     |     |
| `5 << 1`         | Bitwise | `a << 1`  | `10`    |     |     |
| `5 >> 1`         | Bitwise | `a >> 1`  | `2`     |     |     |

---

## üß† Real-Life Analogy

| Operation     | Meaning                               | Example                                 |
| ------------- | ------------------------------------- | --------------------------------------- |
| `and`         | Both conditions must be true          | Light only on if both switches ON       |
| `or`          | Any one condition is enough           | Door opens with fingerprint **or** PIN  |
| `^` XOR       | Only one condition is true (not both) | Alarm if **either** door/window is open |
| `~`           | Flip every bit (ON becomes OFF)       | Reverse switch logic                    |
| `<<` and `>>` | Multiply/divide by powers of 2        | Fast doubling or halving                |

---

## üîÅ Practice Test

Can you guess the output?

```python
a = 6      # 0110
b = 3      # 0011

print(a & b)   # ?
print(a | b)   # ?
print(a ^ b)   # ?
print(~a)      # ?
print(a << 1)  # ?
print(a >> 1)  # ?
