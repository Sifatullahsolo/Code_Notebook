

## âœ… Full Code First

```python
t = [[3 - 1 for i in range(3)] for j in range(3)]
s = 0
for i in range(3):
    s += t[i][i]
    print(s)
```

---

## ðŸ§  Step-by-Step Explanation with Comments

```python
# Build a 3x3 list (2D matrix) where every element is 2
# [3 - 1 = 2] â†’ repeated 3 times for inner and outer loop
t = [[3 - 1 for i in range(3)] for j in range(3)]

# The matrix looks like this:
# t = [
#   [2, 2, 2],
#   [2, 2, 2],
#   [2, 2, 2]
# ]

s = 0  # Initialize sum

# Loop through the diagonal elements: t[0][0], t[1][1], t[2][2]
for i in range(3):
    s += t[i][i]  # Add diagonal value
    print(s)      # Print running total

# Output:
# 2
# 4
# 6
```

---

## ðŸ§± 2D, 3D, 4D Examples (Beginner-Friendly)

### ðŸ“¦ 2D List (Matrix â†’ Rows & Columns)

```python
matrix_2d = [
    [1, 2],
    [3, 4]
]

# Access element at row 0, column 1
print(matrix_2d[0][1])  # Output: 2
```

---

### ðŸ§± 3D List (Like a cube: layers â†’ rows â†’ columns)

```python
matrix_3d = [
    [  # Layer 0
        [1, 2],
        [3, 4]
    ],
    [  # Layer 1
        [5, 6],
        [7, 8]
    ]
]

# Access layer 1, row 0, column 1
print(matrix_3d[1][0][1])  # Output: 6
```

---

### ðŸ§Š 4D List (Think of: building â†’ floor â†’ room â†’ object)

```python
matrix_4d = [
    [  # Building 0
        [  # Floor 0
            [1, 2],  # Room 0
            [3, 4]   # Room 1
        ]
    ]
]

# Access building 0 â†’ floor 0 â†’ room 1 â†’ object 0
print(matrix_4d[0][0][1][0])  # Output: 3
