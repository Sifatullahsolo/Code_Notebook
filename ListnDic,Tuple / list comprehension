 list comprehension


# Square numbers 0–4
squares = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]

# Even numbers from 0–9
evens = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]

# Uppercase all words
words = ["hi", "there"]
upper_words = [w.upper() for w in words]  # ['HI', 'THERE']

# Create list of tuples (x, x^2)
tuples = [(x, x**2) for x in range(3)]  # [(0, 0), (1, 1), (2, 4)]

# Filter vowels
letters = "abcdefg"
vowels = [ch for ch in letters if ch in "aeiou"]  # ['a', 'e']

# Flatten nested list
matrix = [[1, 2], [3, 4]]
flat = [num for row in matrix for num in row]  # [1, 2, 3, 4]

# Replace even with "even"
nums = [1, 2, 3, 4]
tagged = ["even" if x % 2 == 0 else x for x in nums]  # [1, 'even', 3, 'even']

# Get digits from string
s = "a1b2c3"
digits = [ch for ch in s if ch.isdigit()]  # ['1', '2', '3']
















IN DETAILS:

✅ Here's your **FULL Python List Comprehension Lesson** — beginner-friendly, super detailed, with step-by-step breakdowns, comparisons, and real-world examples.

---

# 🧠 PYTHON LIST COMPREHENSION: FULL LESSON

---

## 🔹 What is List Comprehension?

**List Comprehension** is a **shorter** and **faster** way to create a list from a loop.

Instead of:

```python
result = []
for i in range(5):
    result.append(i * 2)
```

We use:

```python
result = [i * 2 for i in range(5)]
```

---

## 🔸 Basic Syntax

```
[ expression  for item in iterable ]
```

* **expression** → what to do with each item
* **for item in iterable** → loop part (like `for i in range(5)`)

✅ Output: a new list.

---

## 🔍 Examples (Step-by-Step)

### 1. 🔢 Double the numbers

```python
nums = [1, 2, 3]
doubled = [x * 2 for x in nums]
print(doubled)  # [2, 4, 6]
```

### 2. 🎭 Add condition (if)

```python
nums = [1, 2, 3, 4, 5]
evens = [x for x in nums if x % 2 == 0]
print(evens)  # [2, 4]
```

### 3. 🔄 Loop + if + else

```python
labels = ["even" if x % 2 == 0 else "odd" for x in range(5)]
print(labels)  # ['even', 'odd', 'even', 'odd', 'even']
```

---

## 📘 Regular Loop vs. List Comprehension

| Task                    | For Loop                      | List Comprehension              |
| ----------------------- | ----------------------------- | ------------------------------- |
| Multiply all by 3       | `for i in x: new.append(i*3)` | `[i*3 for i in x]`              |
| Filter positive numbers | `if i > 0`                    | `[i for i in x if i > 0]`       |
| Conditional transform   | `if... else...` inside loop   | `[a if cond else b for i in x]` |

---

## 🧠 Real Use Cases

### 🔣 Convert words to uppercase

```python
words = ["hello", "world"]
uppercased = [w.upper() for w in words]
```

### 🧮 Square only even numbers

```python
nums = [1, 2, 3, 4]
squares = [n**2 for n in nums if n % 2 == 0]
```

### 📑 Get lengths of words

```python
words = ["apple", "kiwi", "banana"]
lengths = [len(w) for w in words]
```

---

## 🔁 Nested List Comprehension (2D)

### ➕ Flat from 2D list

```python
matrix = [[1, 2], [3, 4]]
flat = [num for row in matrix for num in row]
print(flat)  # [1, 2, 3, 4]
```

### ♟ Chessboard (rows and columns)

```python
board = [[f"{r}{c}" for c in range(1, 4)] for r in "ABC"]
# Output: [['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]
```

---

## 🧪 Advanced Tips

| Syntax                           | Use When…                  |
| -------------------------------- | -------------------------- |
| `[x for x in list if cond]`      | Filter elements            |
| `[f(x) for x in list]`           | Modify every item          |
| `[f(x) if cond else g(x)]`       | Conditional transformation |
| `[y for x in matrix for y in x]` | Flatten a 2D list          |

---

## ⛔ Don't Use If...

* It's too complex or has many `if`/`else` and nested logic.
* Use normal `for` loops for better readability.

---

## 📌 Summary

| Concept            | Example                                    |
| ------------------ | ------------------------------------------ |
| Basic              | `[x for x in range(5)]` → \[0, 1, 2, 3, 4] |
| With condition     | `[x for x in range(5) if x % 2 == 0]`      |
| With if-else       | `["yes" if x > 0 else "no" for x in nums]` |
| 2D list flattening | `[y for row in matrix for y in row]`       |

---

### ✅ Practice:

```python
# Make a list of squares of 1–10
squares = [x**2 for x in range(1, 11)]

# Get all letters in a word except vowels
word = "education"
no_vowels = [ch for ch in word if ch not in "aeiou"]

# Multiply only numbers > 3
nums = [1, 2, 3, 4, 5]
res = [x * 10 for x in nums if x > 3]
